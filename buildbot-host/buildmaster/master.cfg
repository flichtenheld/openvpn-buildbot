# -*- python -*-
# ex: set filetype=python:

import configparser
import json
import treq
import os
import random
import re
import time

from twisted.internet import defer
from twisted.logger import Logger
from twisted.python import failure

from urllib.parse import urlparse

from buildbot.plugins import *
from buildbot.plugins import reporters, secrets, util
from buildbot.process.results import SUCCESS, WARNINGS
from buildbot.process.properties import Interpolate
from buildbot.process.properties import Properties
from buildbot.reporters.base import ReporterBase
from buildbot.reporters.generators.build import BuildStartEndStatusGenerator
from buildbot.reporters.message import MessageFormatterRenderable
from buildbot.util import httpclientservice

log = Logger()


class GerritChecks(ReporterBase):
    name = "GerritChecks"

    def checkConfig(
        self,
        baseURL,
        auth=None,
        verification_name=None,
        verbose=False,
        debug=None,
        verify=None,
        generators=None,
        **kwargs,
    ):
        if generators is None:
            generators = self._create_default_generators()

        super().checkConfig(generators=generators, **kwargs)
        httpclientservice.HTTPClientService.checkAvailable(self.__class__.__name__)

    @defer.inlineCallbacks
    def reconfigService(
        self,
        baseURL,
        auth=None,
        verification_name=None,
        verbose=False,
        debug=None,
        verify=None,
        generators=None,
        **kwargs,
    ):
        self.debug = debug
        self.verify = verify
        self.verbose = verbose

        if generators is None:
            generators = self._create_default_generators()

        yield super().reconfigService(generators=generators, **kwargs)

        if baseURL.endswith("/"):
            baseURL = baseURL[:-1]

        self._http = yield httpclientservice.HTTPClientService.getService(
            self.master, baseURL, auth=auth, debug=self.debug, verify=self.verify
        )

        self._verification_name = verification_name or Interpolate(
            "%(prop:buildername)s"
        )
        self._verbose = verbose

    def _create_default_generators(self):
        start_formatter = MessageFormatterRenderable("Build started.")
        end_formatter = MessageFormatterRenderable("Build done.")

        return [
            BuildStartEndStatusGenerator(
                start_formatter=start_formatter, end_formatter=end_formatter
            )
        ]

    def createStatus(self, change_id, revision_id, uuid, state, url=None):
        payload = {"checker_uuid": uuid, "state": state}

        if url is not None:
            payload["url"] = url

        if self._verbose:
            log.debug(
                "Sending Gerrit status for {change_id}/{revision_id}: data={data}",
                change_id=change_id,
                revision_id=revision_id,
                data=payload,
            )

        return self._http.post(
            "/".join(
                ["/a/changes", str(change_id), "revisions", str(revision_id), "checks"]
            ),
            json=payload,
        )

    @staticmethod
    def getGerritChanges(props):
        if "gerrit_changes" in props:
            return props.getProperty("gerrit_changes")

        if "event.change.number" in props:
            return [
                {
                    "change_id": props.getProperty("event.change.number"),
                    "revision_id": props.getProperty("event.patchSet.number"),
                }
            ]
        return []

    @defer.inlineCallbacks
    def sendMessage(self, reports):
        build = reports[0]["builds"][0]

        props = Properties.fromDict(build["properties"])
        props.master = self.master

        if build["complete"]:
            if build["results"] == util.SUCCESS:
                state = "SUCCESSFUL"
            else:
                state = "FAILED"
        else:
            state = "RUNNING"

        name = yield props.render(self._verification_name)
        uuid = "buildbot:%s" % name.replace("=", "")

        changes = yield self.getGerritChanges(props)
        for change in changes:
            try:
                yield self.createStatus(
                    change["change_id"],
                    change["revision_id"],
                    uuid,
                    state,
                    url=build["url"],
                )
            except Exception:
                log.failure("Failed to send status!", failure=failure.Failure())


def get_worker_setting(config, worker_name, setting):
    """Load a worker setting from worker.ini"""
    worker_config = config

    try:
        value = worker_config.get(worker_name, setting)
    except configparser.NoOptionError:
        value = None

    return value


def get_config(name):
    """Return active master configuration"""
    config = configparser.ConfigParser()

    custom = f"{name}.ini"
    default = f"{name}-default.ini"

    if os.path.exists(custom):
        config.read(custom)
    elif os.path.exists(default):
        config.read(default)
    else:
        print(f"ERROR: could not find {custom} or {default}")
        sys.exit(1)

    return config


# Load configuration from configuration files
worker_config = get_config("worker")
master_config = get_config("master")

c = BuildmasterConfig = {}

# Global settings
persistent_dir = os.path.expanduser(os.path.join(basedir, "persistent"))
master_fqdn = master_config.get("master", "master_fqdn")
buildbot_url = master_config.get("master", "buildbot_url")
title_url = master_config.get("master", "title_url")
docker_network = master_config.get("docker", "network")

# Global email settings
notify_on_missing = json.loads(master_config.get("email", "notify_on_missing"))
extra_recipients = json.loads(master_config.get("email", "extra_recipients"))
fromaddr = master_config.get("email", "fromaddr")
relayhost = master_config.get("email", "relayhost")

# gerrit settings
gerrit_repo_url = master_config.get("gerrit", "repo_url")
gerrit_git_base_url = master_config.get("gerrit", "git_base_url")
verified_authors_list = json.loads(master_config.get("gerrit", "verified_authors_list"))
gerrit_user_password = master_config.get("gerrit", "user_password")

# openvpn settings
openvpn_owner = master_config.get("openvpn", "owner")
openvpn_repo_url = master_config.get("openvpn", "repo_url")
openvpn_main_branch = master_config.get("openvpn", "main_branch")
openvpn_release_branch = master_config.get("openvpn", "release_branch")
openvpn_run_tserver_null_tests = master_config.getboolean("openvpn", "run_tserver_null_tests")
openvpn_run_tclient_tests = master_config.getboolean("openvpn", "run_tclient_tests")
openvpn_run_code_check = master_config.getboolean("openvpn", "run_code_check")
otst = master_config.get("openvpn", "tree_stable_timer")
openvpn_tree_stable_timer = None if otst == "None" else int(otst)

# for packaging
openvpn_build_repo_url = master_config.get("openvpn-build", "repo_url")

# openvpn3 settings
openvpn3_owner = master_config.get("openvpn3", "owner")
openvpn3_repo_url = master_config.get("openvpn3", "repo_url")
openvpn3_branch = master_config.get("openvpn3", "branch")
o3tst = master_config.get("openvpn3", "tree_stable_timer")
openvpn3_tree_stable_timer = None if o3tst == "None" else int(o3tst)

# openvpn3-linux settings
openvpn3_linux_owner = master_config.get("openvpn3-linux", "owner")
openvpn3_linux_repo_url = master_config.get("openvpn3-linux", "repo_url")
openvpn3_linux_branch = master_config.get("openvpn3-linux", "branch")
o3ltst = master_config.get("openvpn3-linux", "tree_stable_timer")
openvpn3_linux_tree_stable_timer = None if o3ltst == "None" else int(o3ltst)

# ovpn-dco settings
ovpn_dco_owner = master_config.get("ovpn-dco", "owner")
ovpn_dco_repo_url = master_config.get("ovpn-dco", "repo_url")
ovpn_dco_branch = master_config.get("ovpn-dco", "branch")
odtst = master_config.get("ovpn-dco", "tree_stable_timer")
ovpn_dco_tree_stable_timer = None if odtst == "None" else int(odtst)
# Each section in worker.ini represents one buildbot worker. The "DEFAULT"
# section gives the default settings and gets filtered out automatically, i.e.
# does not become a worker.
worker_names = worker_config.sections()
# Create a list of builders for each scheduler we will create
builder_names = {}
scheduler_names = [
    "openvpn_main",
    "openvpn_release",
    "openvpn-smoketest",
    "openvpn3",
    "openvpn3-smoketest",
    "openvpn3-linux",
    "openvpn3-linux-smoketest",
    "ovpn-dco",
    "ovpn-dco-smoketest",
]
for scheduler in scheduler_names:
    builder_names[scheduler] = []

# Load configuration options used for packaging, connectivity testing and compile tests
build_and_test_config_opt_combos = json.loads(
    master_config.get("openvpn", "build_and_test_config_opt_combos", fallback="[]")
)
compile_config_opt_combos = json.loads(
    master_config.get("openvpn", "compile_config_opt_combos", fallback="[]")
)
packaging_config_opt_combos = json.loads(
    master_config.get("openvpn", "packaging_config_opt_combos", fallback="[]")
)

c["secretsProviders"] = [
    secrets.SecretInAFile(dirname=os.path.join(persistent_dir, "secrets"))
]

c["workers"] = []

# Create normal and latent workers
for worker_name in worker_names:
    worker_persist = worker_config.get(worker_name, "persist")
    if worker_config.get(worker_name, "type") == "latent_docker":
        image = worker_config.get(worker_name, "image")
        docker_url = worker_config.get(worker_name, "docker_url")
        master_fqdn = worker_config.get(worker_name, "master_fqdn")

        c["workers"].append(
            worker.DockerLatentWorker(
                worker_name,
                worker_config.get(worker_name, "password"),
                max_builds=1,
                notify_on_missing=notify_on_missing,
                properties={
                    "persist": worker_persist,
                },
                docker_host=docker_url,
                followStartupLogs=True,
                image=image,
                masterFQDN=master_fqdn,
                volumes=[f"buildbot-worker-{worker_name}:{worker_persist}"],
                hostconfig={
                    "network_mode": docker_network,
                    "sysctls": {"net.ipv6.conf.all.disable_ipv6": 0},
                    "cap_add": ["NET_ADMIN"],
                    "mem_limit": "4g",
                },
            )
        )
    else:
        c["workers"].append(
            worker.Worker(
                worker_name,
                worker_config.get(worker_name, "password"),
                max_builds=1,
                notify_on_missing=notify_on_missing,
                properties={
                    "persist": worker_persist,
                    "signing_cert_password": get_worker_setting(
                        worker_config, worker_name, "signing_cert_password"
                    ),
                    "signing_cert_sha1": get_worker_setting(
                        worker_config, worker_name, "signing_cert_sha1"
                    ),
                    "timestamp_url": get_worker_setting(
                        worker_config, worker_name, "timestamp_url"
                    ),
                },
            )
        )

c["protocols"] = {"pb": {"port": r"tcp:interface=\:\:0:port=9989"}}

c["change_source"] = []

# any gerrit repo (but for now only OpenVPN 2)
c["change_source"].append(
    changes.GerritEventLogPoller(
        baseURL=gerrit_repo_url + "/a",
        auth=("buildbot", gerrit_user_password),
        gitBaseURL=gerrit_git_base_url,
        get_files=True,
        handled_events=["patchset-created"],
    )
)

# OpenVPN 2 Git repository
c["change_source"].append(
    changes.GitPoller(
        repourl=openvpn_repo_url,
        branches=[openvpn_main_branch, openvpn_release_branch],
        project="openvpn",
        workdir="persistent/gitpoller-workdir-openvpn",
        pollInterval=10,
    )
)

# OpenVPN 3 Git repository
c["change_source"].append(
    changes.GitPoller(
        repourl=openvpn3_repo_url,
        branch=openvpn3_branch,
        project="openvpn3",
        workdir="persistent/gitpoller-workdir-openvpn3",
        pollInterval=10,
    )
)

c["change_source"].append(
    changes.GitPoller(
        repourl=openvpn3_linux_repo_url,
        branch=openvpn3_linux_branch,
        project="openvpn3-linux",
        workdir="persistent/gitpoller-workdir-openvpn3-linux",
        pollInterval=10,
    )
)

c["change_source"].append(
    changes.GitPoller(
        repourl=ovpn_dco_repo_url,
        branch=ovpn_dco_branch,
        project="ovpn-dco",
        workdir="persistent/gitpoller-workdir-ovpn-dco",
        pollInterval=10,
    )
)

c["builders"] = []

# Limit concurrent builds on each Docker host
max_builds = json.loads(master_config.get("docker", "max_builds"))
docker_build_locks = {}

for docker_host, maxcount in max_builds.items():
    docker_build_locks[docker_host] = util.MasterLock(docker_host, maxCount=maxcount)

# Only allow one docker worker to run t_client tests at the same time. This is
# convenience feature to reduce the number of keys required for t_client tests.
docker_tclient_lock = util.MasterLock("docker", maxCount=1)

def getBuilderNameSuffix(combo):
    """Generate builder name suffix from configure options"""
    if not combo:
        return "-default"
    else:
        return combo.replace(" ", "")


def getFactoryName(combo):
    return f"factory{getBuilderNameSuffix(combo)}"


def can_sign(buildstep):
    """Check if this worker can sign binaries"""
    worker_name = buildstep.worker.workername
    worker_config = configparser.ConfigParser()
    worker_config.read("worker.ini")
    sign_capable = True

    try:
        worker_config.get(worker_name, "timestamp_url")
        worker_config.get(worker_name, "signing_cert_sha1")
    except configparser.NoOptionError:
        sign_capable = False

    return sign_capable


# Load build steps from separate files
#
# OpenVPN 2 build steps
for steps_file in [
    "common_unix_steps.cfg",
    "cmake_unix_steps.cfg",
    "common_windows_steps.cfg",
    "common_mingw_steps.cfg",
    "debian_packaging_steps.cfg",
    "device_setup_steps.cfg",
    "tserver_null_pre_steps.cfg",
    "tclient_pre_steps.cfg",
    "check_steps.cfg",
    "tclient_post_steps.cfg",
    "unix_compile_steps.cfg",
    "unix_unit-test_steps.cfg",
    "uncrustify_code_check.cfg",
]:
    exec(
        compile(
            source=open(os.path.join("openvpn", steps_file)).read(),
            filename=os.path.join("openvpn", steps_file),
            mode="exec",
        )
    )

# OpenVPN 3 build steps
for steps_file in ["common_linux_steps.cfg"]:
    exec(
        compile(
            source=open(os.path.join("openvpn3", steps_file)).read(),
            filename=os.path.join("openvpn3", steps_file),
            mode="exec",
        )
    )

# OpenVPN 3 linux build steps
for steps_file in ["common_linux_steps.cfg", "gdbuspp_steps.cfg"]:
    exec(
        compile(
            source=open(os.path.join("openvpn3-linux", steps_file)).read(),
            filename=os.path.join("openvpn3-linux", steps_file),
            mode="exec",
        )
    )

# ovpn-dco build steps
for steps_file in ["common_linux_steps.cfg"]:
    exec(
        compile(
            source=open(os.path.join("ovpn-dco", steps_file)).read(),
            filename=os.path.join("ovpn-dco", steps_file),
            mode="exec",
        )
    )

ccache = {
    "PATH": [
        "/usr/local/opt/ccache/libexec",
        "/usr/lib64/ccache",
        "/usr/lib/ccache/bin",
        "/usr/lib/ccache",
        "${PATH}",
    ],
    "CCACHE_DIR": util.Interpolate("%(prop:persist)s/ccache"),
    "CCACHE_MAXSIZE": "1Gi",
}

factories = {}

# OpenVPN 2 Uncrustify code check
if openvpn_run_code_check:
    factory = util.BuildFactory()
    factory = openvpnAddUncrustifyStepsToBuildFactory(factory, ccache)
    factory_name = "openvpn-code-check"
    factories.update(
        {
            factory_name: {
                "factory": factory,
                "os": "unix",
                "types": ["code-check", "openvpn"],
                "schedulers": ["openvpn_main", "openvpn_release"],
            }
        }
    )
    del factory

# OpenVPN 2 smoketest using default configure options
factory = util.BuildFactory()
factory = openvpnAddCommonUnixStepsToBuildFactory(factory, "", ccache)
factory = openvpnAddUnixCompileStepsToBuildFactory(factory, "", ccache)
factory = openvpnAddUnixUnitTestStepsToBuildFactory(factory, "", ccache)
factory_name = "smoketest"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "unix",
            "types": ["openvpn-smoketest"],
            "schedulers": ["openvpn-smoketest"],
        }
    }
)
del factory

# Basic OpenVPN 2 compile tests on Unix-style operating systems
for combo in compile_config_opt_combos:
    factory = util.BuildFactory()
    factory = openvpnAddCommonUnixStepsToBuildFactory(factory, combo, ccache)
    factory = openvpnAddUnixCompileStepsToBuildFactory(factory, combo, ccache)
    factory = openvpnAddUnixUnitTestStepsToBuildFactory(factory, combo, ccache)
    factory_name = getFactoryName(combo)
    factories.update(
        {
            factory_name: {
                "factory": factory,
                "os": "unix",
                "types": ["openvpn", "compile"],
                "schedulers": ["openvpn_main", "openvpn_release"],
            }
        }
    )
    del factory

# OpenVPN 2 connectivity tests on Unix-style operating systems
if openvpn_run_tclient_tests or openvpn_run_tserver_null_tests:
    for combo in build_and_test_config_opt_combos:
        make_check_env = {}
        make_check_env.update(ccache)
        if openvpn_run_tclient_tests: make_check_env.update({ "TCLIENT_SKIP_RC": "1" })

        factory = util.BuildFactory()
        factory = openvpnAddCommonUnixStepsToBuildFactory(factory, combo, make_check_env)
        factory = openvpnAddUnixCompileStepsToBuildFactory(factory, combo, make_check_env)
        factory = openvpnAddDeviceSetupStepsToBuildFactory(factory, combo, make_check_env)

        if openvpn_run_tserver_null_tests: factory = openvpnAddTServerNullPreStepsToBuildFactory(factory, combo, make_check_env)
        if openvpn_run_tclient_tests:      factory = openvpnAddTClientPreStepsToBuildFactory(factory, combo, make_check_env)

        factory = openvpnAddCheckStepsToBuildFactory(factory, combo, make_check_env)

        if openvpn_run_tclient_tests:      factory = openvpnAddTClientPostStepsToBuildFactory(factory, combo, make_check_env)

        factory_name = getFactoryName(combo)
        factories.update(
            {
                factory_name: {
                    "factory": factory,
                    "os": "unix",
                    "types": ["openvpn", "tclient"],
                    "schedulers": ["openvpn_main", "openvpn_release"],
                }
            }
        )
        del factory

# OpenVPN 2 Debian and Ubuntu packaging
for combo in packaging_config_opt_combos:
    factory = util.BuildFactory()
    factory = openvpnAddCommonUnixStepsToBuildFactory(factory, "")
    factory = openvpnAddDebianPackagingStepsToBuildFactory(factory, "")
    factory_name = getFactoryName("-package")
    factories.update(
        {
            factory_name: {
                "factory": factory,
                "os": "unix",
                "types": ["openvpn", "debian"],
                "schedulers": ["openvpn_main", "openvpn_release"],
            }
        }
    )
    del factory

# OpenVPN 2 Windows msbuild tests
factory = util.BuildFactory()
factory = openvpnAddCommonWindowsStepsToBuildFactory(factory)
factory_name = "msbuild"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "windows",
            "types": ["openvpn", "msbuild"],
            "schedulers": ["openvpn_main", "openvpn_release"],
        }
    }
)
del factory

# OpenVPN 2 cmake build
factory = util.BuildFactory()
factory = openvpnAddCmakeUnixStepsToBuildFactory(factory, ccache)
factory_name = "cmake"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "unix",
            "types": ["openvpn", "cmake"],
            "schedulers": ["openvpn_main", "openvpn_release"],
        }
    }
)
del factory

# OpenVPN 2 Windows mingw build
factory = util.BuildFactory()
factory = openvpnAddCommonMingwStepsToBuildFactory(factory, ccache)
factory_name = "mingw"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "unix",
            "types": ["openvpn", "mingw"],
            "schedulers": ["openvpn_main", "openvpn_release"],
        }
    }
)
del factory

# openvpn3 smoketest
factory = util.BuildFactory()
factory = openvpn3AddCommonLinuxStepsToBuildFactory(factory)
factory_name = "openvpn3-smoketest"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "unix",
            "types": ["openvpn3-smoketest"],
            "schedulers": ["openvpn3-smoketest"],
        }
    }
)
del factory

# Basic openvpn3 builds
factory = util.BuildFactory()
factory = openvpn3AddCommonLinuxStepsToBuildFactory(factory)
factory_name = "openvpn3"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "unix",
            "types": ["openvpn3", "compile"],
            "schedulers": ["openvpn3"],
        }
    }
)
del factory

# OpenSSL openvpn3-linux smoketest builds
factory = util.BuildFactory()
factory = openvpn3LinuxAddGdbusppStepsToBuildFactory(factory, ccache)
factory = openvpn3LinuxAddCommonLinuxStepsToBuildFactory(factory, ccache)
factory_name = "openvpn3-linux-openssl-smoketest"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "unix",
            "types": ["openssl", "openvpn3-linux-smoketest"],
            "schedulers": ["openvpn3-linux-smoketest"],
        }
    }
)
del factory

# OpenSSL openvpn3-linux builds
factory = util.BuildFactory()
factory = openvpn3LinuxAddGdbusppStepsToBuildFactory(factory, ccache)
factory = openvpn3LinuxAddCommonLinuxStepsToBuildFactory(factory, ccache)
factory_name = "openvpn3-linux-openssl"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "unix",
            "types": ["openssl", "openvpn3-linux", "compile"],
            "schedulers": ["openvpn3-linux"],
        }
    }
)
del factory

# ovpn-dco smoketest builds
factory = util.BuildFactory()
factory = ovpnDcoAddCommonLinuxStepsToBuildFactory(factory)
factory_name = "ovpn-dco-smoketest"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "unix",
            "types": ["ovpn-dco-smoketest"],
            "schedulers": ["ovpn-dco-smoketest"],
        }
    }
)
del factory

# Basic ovpn-dco builds
factory = util.BuildFactory()
factory = ovpnDcoAddCommonLinuxStepsToBuildFactory(factory)
factory_name = "ovpn-dco"
factories.update(
    {
        factory_name: {
            "factory": factory,
            "os": "unix",
            "types": ["ovpn-dco", "compile"],
            "schedulers": ["ovpn-dco"],
        }
    }
)
del factory

# Create the builders from the factories dictionary constructed above
for factory_name, factory in factories.items():
    for worker_name in worker_names:
        # Check if this factory is applicable for the worker's operating system
        if factory["os"] != worker_config.get(worker_name, "ostype"):
            continue

        # Disable builds that the worker is not capable of or which we want to
        # skip for other reasons.  These could be thought of as tags of sort.
        build_types = [
            "openvpn",
            "openvpn-smoketest",
            "openvpn3",
            "openvpn3-smoketest",
            "openvpn3-linux",
            "openvpn3-linux-smoketest",
            "openssl",
            "mbedtls",
            "debian",
            "mingw",
            "msbuild",
            "cmake",
            "compile",
            "tclient",
            "ovpn-dco",
            "ovpn-dco-smoketest",
            "code-check",
        ]

        skip_build = False
        for bt in build_types:
            if bt in factory["types"]:
                if worker_config.get(worker_name, f"enable_{bt}_builds") != "true":
                    skip_build = True
        if skip_build:
            continue

        # Docker builds utilize a shared master lock in counting mode. Each Docker host
        # has its own lock with a suitable concurrent build limit.
        if worker_config.get(worker_name, "type") == "latent_docker":
            docker_host = urlparse(worker_config.get(worker_name, "docker_url")).hostname
            locks = [docker_build_locks[docker_host].access("counting")]
        else:
            locks = None

        builder_name = f"{worker_name}-{factory_name}"

        # Pass custom build properties to the builder. This can be used to, for
        # example, to have worker-specific configure flags.
        #
        # If the value of the property would be of unset type (e.g. None or "")
        # filter them out here: that is much easier than trying to filter them
        # out in the build steps, because properties are _not_ strings, but
        # rather objects of Property type.
        #
        properties = {}

        o = worker_config.get(worker_name, "openvpn_extra_config_opts")
        if o.startswith("--"):
            properties["openvpn_extra_config_opts"] = o.split(" ")

        o = worker_config.get(worker_name, "openvpn3_linux_extra_config_opts")
        if o.startswith("--"):
            properties["openvpn3_linux_extra_config_opts"] = o.split(" ")

        cp = json.loads(worker_config.get(worker_name, "openvpn3_linux_command_prefix"))
        properties["openvpn3_linux_command_prefix"] = cp

        c["builders"].append(
            util.BuilderConfig(
                name=builder_name,
                workernames=[worker_name],
                factory=factory["factory"],
                properties=properties,
                locks=locks,
            )
        )

        # The schedulers need a list of applicable builder names. In practice we
        # need different set of builders for each project we are tracking.
        for scheduler in factory["schedulers"]:
            # in most cases we filter schedulers via the build type but in the
            # case of openvpn we have one build-type but two different schedulers
            # so we can filter builder names additionally by target branch
            if worker_config.get(worker_name, f"enable_{scheduler}_builds") == "true":
                builder_names[scheduler].append(builder_name)

# We need to create schedulers after the builders, because otherwise the build
# name lists are not available yet.
c["schedulers"] = []

# Only build if any of the files in the Change match this regular expression
openvpn_file_patterns = [
    "include/.*",
    "m4/.*",
    "src/compat/.*",
    "src/openvpn/.*",
    "tests/.*",
    "compat.m4",
    "config.h\..*",
    "configure.ac",
    "Makefile.am",
    "version.m4",
    ".*\.rst",
    "doc/Makefile.am",
]

openvpn_filter_fn = "^(" + "|".join(openvpn_file_patterns) + ")$"


openvpn_branches = {"main": openvpn_main_branch, "release": openvpn_release_branch}
for branch_type, branch_name in openvpn_branches.items():
    # Ensure that in OpenVPN 2 we run smoke tests first and only if those pass run
    # the full test suite
    openvpn_smoketest_scheduler = schedulers.SingleBranchScheduler(
        name=f"openvpn-smoketest-{branch_type}",
        change_filter=util.ChangeFilter(
            branch=branch_name,
            project="openvpn",
            filter_fn=lambda c: any([re.search(openvpn_filter_fn, f) for f in c.files]),
        ),
        treeStableTimer=openvpn_tree_stable_timer,
        builderNames=builder_names["openvpn-smoketest"],
        properties={ 'owner': openvpn_owner },
    )

    openvpn_full_scheduler = schedulers.Dependent(
        name=f"openvpn-full-{branch_type}",
        upstream=openvpn_smoketest_scheduler,
        builderNames=builder_names[f"openvpn_{branch_type}"],
        properties={ 'owner': openvpn_owner },
    )

    openvpn_gerrit_smoketest_scheduler = schedulers.SingleBranchScheduler(
        name=f"openvpn-gerrit-smoketest-{branch_type}",
        change_filter=util.ChangeFilter(
            repository_re=".*gerrit.*",
            project="openvpn",
            filter_fn=lambda c: any([re.search(openvpn_filter_fn, f) for f in c.files]),
            property_eq={
                "event.patchSet.uploader.name": verified_authors_list,
                "target_branch": branch_name,
            },
            property_not_eq={
                "event.change.status": "MERGED",
            },
        ),
        priority=1,
        treeStableTimer=openvpn_tree_stable_timer,
        builderNames=builder_names["openvpn-smoketest"],
        properties={ 'owner': openvpn_owner },
    )

    openvpn_gerrit_full_scheduler = schedulers.Dependent(
        name=f"openvpn-gerrit-full-{branch_type}",
        upstream=openvpn_gerrit_smoketest_scheduler,
        builderNames=builder_names[f"openvpn_{branch_type}"],
        properties={ 'owner': openvpn_owner },
    )

    c["schedulers"].append(openvpn_smoketest_scheduler)
    c["schedulers"].append(openvpn_full_scheduler)
    c["schedulers"].append(openvpn_gerrit_smoketest_scheduler)
    c["schedulers"].append(openvpn_gerrit_full_scheduler)

openvpn3_smoketest_scheduler = schedulers.SingleBranchScheduler(
    name="openvpn3-smoketest",
    change_filter=util.ChangeFilter(branch=openvpn3_branch, project="openvpn3"),
    treeStableTimer=openvpn3_tree_stable_timer,
    builderNames=builder_names["openvpn3-smoketest"],
    properties={ 'owner': openvpn3_owner },
)

openvpn3_default_scheduler = schedulers.Dependent(
    name="openvpn3-default",
    upstream=openvpn3_smoketest_scheduler,
    builderNames=builder_names["openvpn3"],
    properties={ 'owner': openvpn3_owner },
)

c["schedulers"].append(openvpn3_smoketest_scheduler)
c["schedulers"].append(openvpn3_default_scheduler)

openvpn3_linux_smoketest_scheduler = schedulers.SingleBranchScheduler(
    name="openvpn3-linux-smoketest",
    change_filter=util.ChangeFilter(
        branch=openvpn3_linux_branch,
        project="openvpn3-linux"
    ),
    treeStableTimer=openvpn3_linux_tree_stable_timer,
    builderNames=builder_names["openvpn3-linux-smoketest"],
    properties={ 'owner': openvpn3_linux_owner },
)

openvpn3_linux_default_scheduler = schedulers.Dependent(
    name="openvpn3-linux-default",
    upstream=openvpn3_linux_smoketest_scheduler,
    builderNames=builder_names["openvpn3-linux"],
    properties={ 'owner': openvpn3_linux_owner },
)

c["schedulers"].append(openvpn3_linux_smoketest_scheduler)
c["schedulers"].append(openvpn3_linux_default_scheduler)

ovpn_dco_smoketest_scheduler = schedulers.SingleBranchScheduler(
    name="ovpn-dco-smoketest",
    change_filter=util.ChangeFilter(branch=ovpn_dco_branch, project="ovpn-dco"),
    treeStableTimer=ovpn_dco_tree_stable_timer,
    builderNames=builder_names["ovpn-dco-smoketest"],
    properties={ 'owner': ovpn_dco_owner },
)

ovpn_dco_default_scheduler = schedulers.Dependent(
    name="ovpn-dco-default",
    upstream=ovpn_dco_smoketest_scheduler,
    builderNames=builder_names["ovpn-dco"],
    properties={ 'owner': ovpn_dco_owner },
)

c["schedulers"].append(ovpn_dco_smoketest_scheduler)
c["schedulers"].append(ovpn_dco_default_scheduler)

c["schedulers"].append(
    schedulers.ForceScheduler(
        name="openvpn-main-force",
        builderNames=builder_names["openvpn_main"],
        codebases=[
            util.CodebaseParameter(
                "",
                label="Commit",
                branch=util.StringParameter(name="branch", default=openvpn_main_branch),
                revision=util.StringParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=openvpn_repo_url),
                project=util.FixedParameter(name="project", default="openvpn"),
            ),
        ],
    )
)
c["schedulers"].append(
    schedulers.ForceScheduler(
        name="openvpn-release-force",
        builderNames=builder_names["openvpn_release"],
        codebases=[
            util.CodebaseParameter(
                "",
                label="Commit",
                branch=util.StringParameter(name="branch", default=openvpn_release_branch),
                revision=util.StringParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=openvpn_repo_url),
                project=util.FixedParameter(name="project", default="openvpn"),
            ),
        ],
    )
)

c["schedulers"].append(
    schedulers.ForceScheduler(
        name="openvpn3-force",
        builderNames=builder_names["openvpn3"],
        codebases=[
            util.CodebaseParameter(
                "",
                label="Commit",
                branch=util.StringParameter(name="branch", default=openvpn3_branch),
                revision=util.StringParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=openvpn3_repo_url),
                project=util.FixedParameter(name="project", default="openvpn3"),
            ),
        ],
    )
)

c["schedulers"].append(
    schedulers.ForceScheduler(
        name="openvpn3-linux-force", builderNames=builder_names["openvpn3-linux"],
        codebases=[
            util.CodebaseParameter(
                "",
                label="Commit",
                branch=util.StringParameter(name="branch", default=openvpn3_linux_branch),
                revision=util.StringParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=openvpn3_linux_repo_url),
                project=util.FixedParameter(name="project", default="openvpn3-linux"),
            ),
        ],
    )
)

c["schedulers"].append(
    schedulers.ForceScheduler(
        name="ovpn-dco-force",
        builderNames=builder_names["ovpn-dco"],
        codebases=[
            util.CodebaseParameter(
                "",
                label="Commit",
                branch=util.StringParameter(name="branch", default=ovpn_dco_branch),
                revision=util.StringParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=ovpn_dco_repo_url),
                project=util.FixedParameter(name="project", default="ovpn-dco"),
            ),
        ],
    )
)

c["services"] = []

template = """\
Build status: {{ summary }}
Worker used: {{ workername }}
Build URL: {{ build_url }}

Exit codes for the build steps:
{% for step in build['steps'] %}
{{ step['name'] }}: {{ step['results'] }}
{% endfor %}

-- Buildbot
"""

generator = reporters.BuildStatusGenerator(
    mode=("failing",),
    add_logs=True,
    message_formatter=reporters.MessageFormatter(
        template_type="plain",
        template=template,
        want_steps=True,
        want_logs=True,
        want_logs_content=True,
    ),
)

mn = reporters.MailNotifier(
    fromaddr=fromaddr,
    sendToInterestedUsers=False,
    extraRecipients=extra_recipients,
    relayhost=relayhost,
    generators=[generator, reporters.WorkerMissingGenerator()],
)

c["services"].append(mn)

c["services"].append(
    GerritChecks(
        baseURL=gerrit_repo_url, auth=("buildbot", gerrit_user_password), verbose=True
    )
)

c["title"] = "OpenVPN buildbot"
c["titleURL"] = title_url
c["buildbotURL"] = buildbot_url
c["www"] = {
    "port": r"tcp:interface=\:\:0:port=8010",
    "plugins": {
        "waterfall_view": True,
    },
}

c["db"] = {
    "db_url": f"sqlite:////{persistent_dir}/libstate.sqlite",
}
